package org.example.web;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.example.auth.util.AuthUtil;
import org.example.client.DigestRestClient;
import org.example.client.DigestRestClientSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.web.DefaultErrorAttributes;
import org.springframework.boot.autoconfigure.web.ErrorAttributes;
import org.springframework.boot.autoconfigure.web.ErrorController;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.request.RequestAttributes;
import org.springframework.web.context.request.ServletRequestAttributes;
import org.springframework.web.servlet.ModelAndView;


/**
 * Controller that handles the login/logout endpoints expected by the UI generated by
 * https://github.com/marklogic/slush-marklogic-node. In addition, it also proxies all REST API requests to MarkLogic.
 */
@Controller
public class AppController implements ErrorController {

    protected final static Logger logger = LoggerFactory.getLogger(AppController.class);

    private final ErrorAttributes errorAttributes = new DefaultErrorAttributes();

    @Autowired
    private DigestRestClient digestRestClient;


    @Autowired
    private AuthUtil authUtil;

    /**
     * Assumes that the root URL should use a template named "index", which presumably will setup the Angular app.
     */
    @RequestMapping(value = "/", method = RequestMethod.GET)
    public String index() {
        return "index";
    }

    /**
     * The UI checks the user's login status via this endpoint.
     */
    @RequestMapping(value = "/api/user/status", method = RequestMethod.GET)
    @ResponseBody
    public String userStatus(HttpServletResponse response) {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        response.setContentType("application/json");
        if (auth != null && auth.isAuthenticated()) {
            String username = authUtil.getUsername(auth);
            return String.format("{\"authenticated\":true, \"username\":\"%s\"}", username);
        }
        return "{\"authenticated\":false}";
    }

    /**
     * Assumes that Spring Security is configured to use a custom form for a login page with a URL of "/login", with the
     * template for that form being named "login".
     */
    @RequestMapping(value = "/login", method = RequestMethod.GET)
    public String showLoginPage() {
        return "login";
    }

    /**
     * Assumes that Spring Security is configured to use a custom form for a login page with a URL of "/saml-login", with the
     * template for that form being named "samllogin".
     */
    @RequestMapping(value = "/samllogin", method = RequestMethod.GET)
    public String showSAMLLoginPage() {
        return "samllogin";
    }

    /**
     * The UI logs the user out via this endpoint.
     */
    @RequestMapping(value = "/api/user/logout", method = RequestMethod.GET)
    public String logout(HttpServletRequest request, HttpServletResponse response) {
        SecurityContext context = SecurityContextHolder.getContext();
        Authentication auth = null;
        if (context != null){
            DigestRestClientSession upstreamSession = (DigestRestClientSession)context.getAuthentication();
            if (upstreamSession!=null){
                // remove rest template if it is still in the authenticated context
                upstreamSession.setRestTemplate(null);
            }
        }

        // invoke Spring's logout handler
        new SecurityContextLogoutHandler().logout(request, response, auth);
        return "login";
    }

    /**
     * Proxy all REST API requests to MarkLogic via an instance of HttpProxy.
     */
    @RequestMapping(value = "/v1/config/query/*", method = {RequestMethod.GET})
    @ResponseBody
    public void proxyConfigQuery(HttpServletRequest httpRequest, HttpServletResponse httpResponse) {
        digestRestClient.proxy(httpRequest, httpResponse, "Content-type");
    }

    @RequestMapping(value = "/v1/graphs/sparql*", method = {RequestMethod.GET})
    @ResponseBody
    public void proxyGraphsSparql(HttpServletRequest httpRequest, HttpServletResponse httpResponse) {
        digestRestClient.proxy(httpRequest, httpResponse, "Content-type");
    }

    @RequestMapping(value = "/v1/search", method = {RequestMethod.GET, RequestMethod.POST})
    @ResponseBody
    public void proxySearch(HttpServletRequest httpRequest, HttpServletResponse httpResponse) {
        digestRestClient.proxy(httpRequest, httpResponse, "Content-length", "Content-type");
    }

    @RequestMapping(value = "/v1/suggest", method = {RequestMethod.GET, RequestMethod.POST})
    @ResponseBody
    public void proxySuggest(HttpServletRequest httpRequest, HttpServletResponse httpResponse) {
        digestRestClient.proxy(httpRequest, httpResponse, "Content-type");
    }

    @RequestMapping(value = "/v1/values/*", method = {RequestMethod.GET, RequestMethod.POST})
    @ResponseBody
    public void proxyValues(HttpServletRequest httpRequest, HttpServletResponse httpResponse) {
        digestRestClient.proxy(httpRequest, httpResponse, "Content-type");
    }

    @RequestMapping(value = "/v1/documents")
    @ResponseBody
    public void proxyDocuments(HttpServletRequest httpRequest, HttpServletResponse httpResponse) {
        digestRestClient.proxy(httpRequest, httpResponse, "Content-type", "Location");
    }

    @RequestMapping(value = "/v1/resources/*")
    @ResponseBody
    public void proxyResources(HttpServletRequest httpRequest, HttpServletResponse httpResponse) {
        digestRestClient.proxy(httpRequest, httpResponse, "Content-type");
    }

    /**
     * System-wide error handler.
     *
     * @param request
     * @return
     */
    @RequestMapping(value = "/error", produces = "text/html")
    public ModelAndView errorHtml(HttpServletRequest request) {
        RequestAttributes requestAttributes = new ServletRequestAttributes(request);
        Map<String, Object> map = this.errorAttributes.getErrorAttributes(requestAttributes, false);
        if (map.containsKey("status") && "404".equals(map.get("status").toString())) {
            // Show the index view, which should result in Angular processing the URL according to its routes.
            return new ModelAndView("index", map);
        }
        return new ModelAndView("error", map);
    }

    /**
     * Required by the ErrorController interface.
     */
    @Override
    public String getErrorPath() {
        return "/error";
    }


}
